----------
JS: BASICS
----------

1.  Difference between var, let and const in javascript?
    - All var, let and const are used to declare the variable in JS
    - Variable defined using var has a function scope.
    - Variable defined using let and const has a blocked scope.
    - Variable defined using const cannot be modified.

2.  What are JS engine?
    - JS engine are used to convert the high level code that JS code into machine-readable code(ByteCode)
    - In chrome it has v8 engine 
    - FireFox it has SpiderMonkey engine.
    - IE has Chakra engine
    - Safari has JavaScriptCore engine

3.  In how many ways you can create an object?
    - Constructor:  Constructor is nothing but a function and with the help of new keyword, 
                    constructor function allows to create multiple objects
    - Object literals: We simply define the property and values inside the curly braces.
    - Object.create(): Object.create() method creates the new object using the existing object as the prototype.
    - class:  ES6 supports class concepts similar to object oriented language, so object can be created out 
              of the class in JS as well.

4.  Ways to clone object in JS?
    - There 3 ways to clone the object:
      - Spread Operator: [...array/object]
      - Object.assign method: Object.assign({}, obj1);
      - Using JSON: JSON.parse(JSON.stringify(object))
   
5.  What is Shallow copy and Deep copy in JS?
    - Shallow copy: It means only the first level of object/Array is copied, deeper level are referenced.
                    - Spread Operator and Object.assign does the shallow copy of object/array.
    - Deep Copy:  It is a true copy where all the nested object is also copied.
                  - JSON.parse(JSON.stringify(object));
				 
6.  What is significance of 'this' keywork in JS?
    - 'this' stores the current execution context of the javascript program
    - 'this' keywork behave deferently base on the function invocation
    - 3 types of function invocation:
	    - Function Invocation:
        - here 'this' refers to the Global context.
	    - Method Invocation:
	      - when any function is invoked form the object it is know as method invocation.
	        Eg: personObj.printInfo()
		      here 'this' refers to the object which used to call the method.
	    - Constructor Invocation:
	      - Constructor Invocation is performed when 'new' keyword is used followed by the function name
	        - let personObject = new Person('Zameer', 'Inamdar');
	
7.  What is settimeout, cleartimeout, setinterval and clearintervals methods in JS?

8.  What are trim functions in JS?

------------
JS: ADVANCED
------------
1. What is hoisting in JS?

2.  What are Transpilers and Polyfills?
    - Transpilers:  It is library which translate the source code to another source code.
                    It parse the modern code and rewrite the it using older syntax construct so that it can run in older browser:

                    Babel is one of the most prominent transpilers.
                    Modern project build systems, such as webpack, provide means to run transpiler automatically on every code change, so it’s very easy to 
                    integrate into development process.
                    eg:
                    // before running the transpiler // nullish coalescing operator
                    height = height ?? 100;

				            // after running the transpiler
                    height = (height !== undefined && height !== null) ? height : 100;

    - Polyfills:  The script that updates/add new functions so that it can be run without errors in old browser.
                  eg:
                  if (!Math.trunc) { // if no such function
                    // implement it
                    Math.trunc = function(number) {
                      // Math.ceil and Math.floor exist even in ancient JavaScript engines
                      // they are covered later in the tutorial
                      return number < 0 ? Math.ceil(number) : Math.floor(number);
                    };
                  }
                  'core js' that supports a lot, allows to include only needed features.
                  'polyfill.io' service that provides a script with polyfills, depending on the features and 
                  user’s browser. 

3. 	What is Call, Apply and Bind in JS OR What is Function borrowing?
    - Function borrowing: Function borrowing allows us to use the methods of one object on a different object
                          without having to make a copy of that method.
    - Call:  It invokes the function and allows you to pass the arguments one by one.
    - Apply: It invokes the function and allows you to pass the arguments as an array.
    - Bind:  It returns a new function and allows you to pass the any number of arguments as array.
 
4.  What are Map, Reduce and Filter Array functions in JS?
    - Map, Reduce and Filter are Array functions which transforms the array according to the applied function.
    - Map:  It applies a given function on all the elements of the Array and return the updated Array
    - Reduce: It reduces all the elements of the Array to the single value by repeatedly applying a function 
    - Filter: It filters the elements from Array and return array of element which statisfy the condition.

5.  What is closure in JS?
    - Closure is the combination of a function bundled together with reference to its surrounding 
      state(the lexical enviournemnt)

6.  What is IIFE or Self Exceuting Anonymous Function?
    - IIFE is 'Immediately Invoking Expression' is JS function that run as soon as it is defined.
    - It is also known as design pattern as 'Self Exceuting Anonymous Function'
      - It contains two parts:
        - The first one is the anonymous function with lexical scope enclosed in ()
	      - It prevents accessing variables within the IIFE as well as polluting the global scope.
	    - The second part creates the immediate invoked function expression () through which JS engine will
        directly interpret the function.

7.  Encoding & Decoding of data in JS?
    - When data needs to be transferred in API we can use data encoding and decoding we need to decode the data from 
      the API.
    - Encoding btoa(): Binary to ASCII
    - Decoding atob(): ASCII to Binary.

8.  What are spread operator and rest operator?
    - Spread operator: It expands an array into elements
    - Rest operator: collects multiple element and condenses it to single element
 
9.  What are Web workers and Service workers? 
    - Web workers:  Web workers gives us the possibility to write the multi threaded Javascript, which does not block 
                    the DOM.
                    Useful to improve the performance of the web page.
    - Service workers:  Service worker is a script that runs independently in the browser background. On user side it can
                        intercept its network requests and decide what to load(fetch).
                        Service worker mainly serve features like background sync, push notifications and they are commonly
                        used for 'offline first' applications.

10. Web workers vs Service workers vs Worklets?
    - Web workers is general purpose type worker, this is mainly used for off-load pretty much any heavy processing from
      the main thread.
    - Service workers is explicitly used for being the proxy between the browser and network and/or cache.
    - Worklets are a very lightweight, higly specific worker. They enable us as developer to hook into various
      parts of the browser's rendering process.

11. What is critical rendering path? https://bitsofco.de/understanding-the-critical-rendering-path/
    - When browser receives the HTML response for a page from server, there are lots of steps to be taken before pixels
      is drawn in screen.
      This sequence the browsers needs to run through for the initial paint of the page is called 'Critical Rendering Path'.
      6 stages of CRP are:
      1.  Constructing the DOM tree: The DOM Tree is an Object representation of the fully paresed HTML page.
      2.  Constructing the CSSOM tree:  The CSSOM (CSS object model) is an Object representation of the styles associated
                                        with the DOM.
      3.  Running JS: Javascript is considered a 'Parsing Blocking resource', this means that the parsing of the HTML 
                      document itself is blocked by JS.
      4.  Creating the Render Tree: The Render Tree is the combination of the DOM and CSSOM trees. It is a tree that 
                                    represents what will be eventually rendered on the page. This means that it only
                                    captures the visible content and will not include, for example, elements that have
                                    been hidden with CSS.
      5.  Generating the Layout:  The Layout is what determines what the size of the viewport is, which provide context 
                                  for CSS styles that are dependent on it. 
                                  Note: if no viewport is given the default width is 980px.
      6.  Painting: In Painting step the visible content of the page can be converted to pixels to be displayed on the 
                    screen.

12. What is web sockets?

13. What is callback hell?

14. What is Promise in JS?

15. What is the use of async and await?
    - Async:  JS is is synchronous language, in order to make function asynchronous we can use async keyword.
              It simply allow us to write promise based code.
    - Await:  Await function is used to wait for the promise. 
              It could be used only in the async block.
              It makes the code to wait untill the promise returns a result.
              It only makes async block wait.

16. What is export in JS and what is export default?
    - Export: Export statement is used when creating the JavaScript modules to export objects, function, variables so
              they can be used by other programs with the help of the import statments.
              There are 2 types of exports:
              1.  Named Export: Name exports are useful to export severals values, During the import, it is mandatory
                                to use the same name of the corresponding object.
              2.  Default Exports:  Default exports are used to export only a single object, function, variable.
                                    During the import, we can use any name to import.
              Note: We can use both 'Named' and 'Default' exports in the same file.

17. What is Throttling vs debouncing in JS?
    - Throttling and Debouncing techniques are used to limit the number of times a function
      can execute.
    - Throttling: Throttling is a technique in which, no matter how many times the user fires
                  the event, the attached function will be executed only once in the given
                  time interval.
                  Throttling  ensures that the function executes at a reqular interval.

    - Debouncing: Debouncing is a technique in which, no matter how many times the user fires
                  the event, the attached function will be executed only after the specified
                  time once the user stop firing the event.
                  Debouncing behaves like grouping multiple events into one single event.

18. What is webpack in JS?

JS: Programs
1.  Different ways to clone object
2.  Factorial of a number
3.  Fibonacci number at nth position
4.  Fibonacci series till nth position
5.  Summation of Array
6.  Multiply each element of Array with number
7.  Subset of array [1,2,3,1,3,4,5,6,7] from 3 to 7 position
8.  Remove the duplicate values form the array [1,2,3,1,3,4,5,6,7]
9.  Curring Functions eg: sum()()()()()?
10. Polyfills for reduce function
11. Polyfills for foreach
12. Polyfills for subject and behaviour subject

JS: Design Patterns
1.  What is Modular Design Pattern? https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch09s02.html
    - Modular Pattern is used to emulate the concept of classes in such a way that we are able to include both 
      Private/Public methods or variables in a single object, thus shielding particular parts from global scope.

2. What is Singleton Design Pattern?

3. What is Factory Design Pattern?

4. Pub-sub/Event Emitter Design Pattern?

5. What is Facade Design Pattern?

JS: Assignments
1. Create a Calculator

JS ARCHITECTURE:
- q.all
-. how to avoid nested for loop
1. microservice
2. How browser will know the new version
file#code.js
3. Denal of service.
6. How do you handle security
7. How to manage flash sale
RabbitMQ
8. Why micro-service are stateless?
18. Microfront ends, webpack fedration
19. How to manage state, pub sub parttern or emit emitters

21. Performance from google chrome
22. Microservice - 100 post each request to get like and comment
24. electron framework
24. cross site scripting attack example - sanitize html
- How will you decide technology
- How you decide which component develop
how to logout from all tabs


4. hacker request per second, how to avoid
5. Thousand records 

MANAGEMENT:
- How will you divide your work

ES6 features:
 - templating
 - destructure


babel -> transp


ANGULAR:
13. Promises vs timeout promisis has preccedence than any other function
14. Declaretive vs Imperative React/angular is declaretive and js is imperative
23. web pack
- canativate
- authguard
- loadchildren
- router
- Dom Sanitizer in angular
- CORS attack/forgery

- Difference between callback and promise
- custom module instead of appcomponent


AWS:
4. AWS - different ways to deploy application
IAM
VPC - Compound
- public subnet 80, privite subnet - people
- route tables - Door
- Load Balancer - Enter
Peer VPC (Mumbai, Delhi)

SQL:
Graphql
All ids, single query to db
Mongo, SQL, NoSQL
Write SQL
Read Mongo, NoSQL
NoSQL - no in memory
Redis - 
Rabbit nq - 


NODEJS, Express, 
1. Indexing in backend

CSS:
The CSS Box Model

polyfills for reduce, subject and behaviour subject?
Sum of the array elements

Custome middleware in nodeJS

