----------
JS: BASICS
----------

1.  Difference between var, let and const in javascript?
    - All var, let and const are used to declare the variable in JS
    - Variable defined using var has a function scope.
    - Variable defined using let and const has a blocked scope.
    - Variable defined using const cannot be modified.

2.  What are JS engine?
    - JS engine are used to convert the high level code that JS code into machine-readable code(ByteCode)
    - In chrome it has v8 engine 
    - FireFox it has SpiderMonkey engine.
    - IE has Chakra engine
    - Safari has JavaScriptCore engine

3.  In how many ways you can create an object?
    - Constructor:  Constructor is nothing but a function and with the help of new keyword, 
                    constructor function allows to create multiple objects
    - Object literals: We simply define the property and values inside the curly braces.
    - Object.create(): Object.create() method creates the new object using the existing object as the prototype.
    - class:  ES6 supports class concepts similar to object oriented language, so object can be created out 
              of the class in JS as well.

4.  Ways to clone object in JS?
    - There 3 ways to clone the object:
      - Spread Operator: [...array/object]
      - Object.assign method: Object.assign({}, obj1);
      - Using JSON: JSON.parse(JSON.stringify(object))
   
5.  What is Shallow copy and Deep copy in JS?
    - Shallow copy: It means only the first level of object/Array is copied, deeper level are referenced.
                    - Spread Operator and Object.assign does the shallow copy of object/array.
    - Deep Copy:  It is a true copy where all the nested object is also copied.
                  - JSON.parse(JSON.stringify(object));
				 
6.  What is significance of 'this' keywork in JS?
    - 'this' stores the current execution context of the javascript program
    - 'this' keywork behave deferently base on the function invocation
    - 3 types of function invocation:
	    - Function Invocation:
        - here 'this' refers to the Global context.
	    - Method Invocation:
	      - when any function is invoked form the object it is know as method invocation.
	        Eg: personObj.printInfo()
		      here 'this' refers to the object which used to call the method.
	    - Constructor Invocation:
	      - Constructor Invocation is performed when 'new' keyword is used followed by the function name
          - here 'this' refers to the object which used to call the method.
	        - let personObject = new Person('Zameer', 'Inamdar');
	
7.  What is settimeout, cleartimeout, setinterval and clearintervals methods in JS  OR what are webAPI methods 
    provided by browser?
    - setTimeout and clearTimeout: setTimeout takes two arguments, 1st the callback function and 2nd one after 
      how  much time(in ms) it should be executed.
      Then number ID value is retured by setTimeOut function which needs to be passed into clearTimeout() to clear
      the timer.
    - setInterval and clearInterval: setTimeut method repeats a given function at every given time-interval.
      The number id value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval()
      function to clear the interval.

8.  What are trim functions in JS?
    - trim(): Trim function removes the leading and trailing spaces from the string.
    - trimLeft(): It removes all leading spaces from the string.
    - trimRight():  It removes all the trailing spaces from the string.

9.  Difference between normal function and arrow functions?
    - Arrow functions also known as fat arrow function is a new feature introduced by ES6.
      While both regular function and arrow functions work in similar manner, there are certain differences between them.
      1.  Syntax difference.
      2.  Arguments binding:  Arrow functions does not have an 'arguments' binding. 
      3.  Use of 'this' keyword:  Unlike regular function, arrow functions do not have their own 'this'.
      4.  Use of 'new' keyword: Regular functions are constructible, they can be called using the 'new' keyword.
                                However the arrow functions are only 'callable' and not 'constructible'. Thus we will get
                                runtime error on trying to construct a 'non-constructible' arrow functions using new keyword.

10. What are currying functions in JS?
    - Currying is the technique in which function with multiple arguments is transformed into several functions of single
      argument.
      eg: function sum(a,b,c) is transformed to curriedFunction(a)(b)(c).

------------
JS: ADVANCED
------------

1.  What is hoisting in JS?
    - In JS, Hoisting is the default behaviour of moving all the declaration at the top of the scope before execution.
      Basically, it gives us an advantage that no matter where functions and variables are declared, they are moved to 
      the top of their scope regardless of whether their scope is global or local.

2.  What are Transpilers and Polyfills?
    - Transpilers:  It is library which translate the source code to another source code.
                    It parse the modern code and rewrite the it using older syntax construct so that it can run in older browser:

                    Babel is one of the most prominent transpilers.
                    Modern project build systems, such as webpack, provide means to run transpiler automatically on every code
                    change, so it’s very easy to integrate into development process.
                    eg:
                    // before running the transpiler // nullish coalescing operator
                    height = height ?? 100;
                    // after running the transpiler
                    height = (height !== undefined && height !== null) ? height : 100;

    - Polyfills:  The script that updates/add new functions so that it can be run without errors in old browser.
                  eg:
                  if (!Math.trunc) { // if no such function
                    // implement it
                    Math.trunc = function(number) {
                      // Math.ceil and Math.floor exist even in ancient JavaScript engines
                      // they are covered later in the tutorial
                      return number < 0 ? Math.ceil(number) : Math.floor(number);
                    };
                  }
                  'core js' that supports a lot, allows to include only needed features.
                  'polyfill.io' service that provides a script with polyfills, depending on the features and 
                  user’s browser. 

3.  What is Call, Apply and Bind in JS OR What is Function borrowing?
    - Function borrowing: Function borrowing allows us to use the methods of one object on a different object without 
                          having to make a copy of that method.
    - Call:  It invokes the function and allows you to pass the arguments one by one.
    - Apply: It invokes the function and allows you to pass the arguments as an array.
    - Bind:  It returns a new function and allows you to pass the any number of arguments as array.
 
4.  What are Map, Reduce and Filter Array functions in JS?
    - Map, Reduce and Filter are Array functions which transforms the array according to the applied function.
    - Map:  It applies a given function on all the elements of the Array and return the updated Array
    - Reduce: It reduces all the elements of the Array to the single value by repeatedly applying a function 
    - Filter: It filters the elements from Array and return array of element which statisfy the condition.

5.  What is closure in JS?
    - A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).
    In other words, a closure gives you access to an outer function’s scope from an inner function.
    In JavaScript, closures are created every time a function is created, at function creation time.

    Practical example of closure is of emulating of private methods and variables. JS does not provide this functionality
    by default:

    let counter = (function() {

      var privateCounter = 0;
      function changeCounter(val) {
        privateCounter += val;
      }

      return {
        increment: function() {
          changeCounter(1);
        },
        decrement: function() {
          changeCounter(-1);
        },
        getCounter: function() {
          return privateCounter;
        }
      }
    })();

    counter.increment();
    console.log(counter.getCounter());
    counter.decrement();
    console.log(counter.getCounter());


6.  What is IIFE or Self Exceuting Anonymous Function?
    - IIFE is 'Immediately Invoking Expression' is JS function that run as soon as it is defined.
    - It is also known as design pattern as 'Self Exceuting Anonymous Function'
      - It contains two parts:
        - The first one is the anonymous function with lexical scope enclosed in ()
	      - It prevents accessing variables within the IIFE as well as polluting the global scope.
	    - The second part creates the immediate invoked function expression () through which JS engine will  directly
        interpret the function.

7.  Encoding & Decoding of data in JS?
    - When data needs to be transferred via API we can use data encoding and we can decode data from the API.
    - Encoding btoa(): Binary to ASCII
    - Decoding atob(): ASCII to Binary.

8.  What are spread operator and rest parameter?
    - Spread operator:  Spread operator allows an iterable to expand in places where 0+ arguments are expected.
                        It expands an array into elements.
    - Rest parameter: The rest parameter syntax allows us to represent an indefinite number of arguments as an array.
 
9.  What are Web workers and Service workers? 
    - Web workers:  Web workers gives us the possibility to write the multi threaded Javascript code, which does not block 
                    the DOM.
                    Useful to improve the performance of the web page.
    - Service workers:  Service worker is a script that runs independently in the browser background. On user side it can
                        intercept its network requests and decide what to load(fetch).
                        Service worker mainly serve features like background sync, push notifications and they are commonly
                        used for 'offline first' applications.

10. Web workers vs Service workers vs Worklets?
    - Web workers is general purpose type worker, this is mainly used for off-load pretty much any heavy processing from
      the main thread.
    - Service workers is explicitly used for being the proxy between the browser and network and/or cache.
    - Worklets are a very lightweight, higly specific worker. They enable us as developer to hook into various
      parts of the browser's rendering process.

11. What is critical rendering path? https://bitsofco.de/understanding-the-critical-rendering-path/
    - When browser receives the HTML response for a page from server, there are lots of steps to be taken before pixels
      is drawn in screen.
      This sequence the browsers needs to run through for the initial paint of the page is called 'Critical Rendering Path'.
      6 stages of CRP are:
      1.  Constructing the DOM tree: The DOM Tree is an Object representation of the fully paresed HTML page.
      2.  Constructing the CSSOM tree:  The CSSOM (CSS object model) is an Object representation of the styles associated
                                        with the DOM.
      3.  Running JS: Javascript is considered a 'Parsing Blocking resource', this means that the parsing of the HTML 
                      document itself is blocked by JS.
      4.  Creating the Render Tree: The Render Tree is the combination of the DOM and CSSOM trees. It is a tree that 
                                    represents what will be eventually rendered on the page. This means that it only
                                    captures the visible content and will not include, for example, elements that have
                                    been hidden with CSS.
      5.  Generating the Layout:  The Layout is what determines what the size of the viewport is, which provide context 
                                  for CSS styles that are dependent on it. 
                                  Note: if no viewport is given the default width is 980px.
      6.  Painting: In Painting step the visible content of the page can be converted to pixels to be displayed on the 
                    screen.

12. What is web sockets?

13. What is callback hell? OR What is Pyramid of Doom?
    - Callback functions are nothing but functions that take some time to produce a result.
    - When we have a nested callbacks methods where each callback function takes an argument that is a result from 
      previous callbacks, the code structure becomes complex and difficult to read and maintain.
      And if there is error in one function it will affect all other functions.
      To avoid this we can use the Promises.

14. What is Promise in JS?
    - Promises are used to handle asynchronous operations in JS.
    - A Promise is a proxy for the value not necessarily known when it is created.
    - It has different states:
      - pending:  Neither fulfilled nor rejected
      - fulfilled:  meaning that operations was completed successfully.
      - rejected: meaning that operations was failed.

15. What is the use of async and await?
    - Async:  JS is is synchronous language, in order to make function asynchronous we can use async keyword.
              It simply allow us to write promise based code.
    - Await:  Await function is used to wait for the promise. 
              It could be used only in the async block.
              It makes the code to wait untill the promise returns a result.
              It only makes async block wait.

16. What is export in JS and what is export default?
    - Export: Export statement is used when creating the JavaScript modules to export objects, function, variables so
              they can be used by other programs with the help of the import statments.
              There are 2 types of exports:
              1.  Named Export: Name exports are useful to export severals values, During the import, it is mandatory
                                to use the same name of the corresponding object.
              2.  Default Exports:  Default exports are used to export only a single object, function, variable.
                                    During the import, we can use any name to import.
              Note: We can use both 'Named' and 'Default' exports in the same file.

17. What is Throttling vs debouncing in JS?
    - Throttling and Debouncing techniques are used to limit the number of times a function
      can execute.
    - Throttling: Throttling is a technique in which, no matter how many times the user fires
                  the event, the attached function will be executed only once in the given
                  time interval.
                  Throttling  ensures that the function executes at a reqular interval.

    - Debouncing: Debouncing is a technique in which, no matter how many times the user fires
                  the event, the attached function will be executed only after the specified
                  time once the user stop firing the event.
                  Debouncing behaves like grouping multiple events into one single event.

18. What is webpack in JS?
    - Webpack is a static module bundler for modern Javascript.
      When webpack processes your application, it internally builds a dependency graph from one or more entries points and 
      then combines every module your project needs into one or more bundles.
      To get started you only need to understand its Core Concepts:
      - Entry
      - Output
      - Loaders
      - Plugins
      - Mode
      - Browser Compatibility

19. Explain event looping in JS? https://flaviocopes.com/javascript-event-loop/#:~:text=In%20general%2C%20in%20most%20browsers,handle%20API%20calls%20for%20example.

    - The event loop is a constantly running process that monitors both the callback queue and the call stack.
    - If the call stack is not empty, the event loop waits until it is empty and places the next function from 
      the callback queue to the call stack. If the callback queue is empty, nothing will happen.

    - JS is single threaded language.
    - All function calls is maintain CALL-STACK(LIFO).
    - If code contains any platform API methods or event such as onclick eg setTimeout is present then its callback method is added in 
      CALLBACK-EVENT-QUEUE (FIFO). once call stack is empty then this callback function is added in the callback
    - If code contains Promise then its resolve method is added in JOB-QUEUE which also a queue(FIFO). As soon as its resolve method is resolved it is 
      push to CALL-STACK.
    - JOB-QUEUE has higher preccedence then EVENT-QUEUE.

20. What is $q.all?
    - $q.all() is AngularJS method to combine all promises and return once promise.
      If all promisis pass the combine promise is all pass.
      If one of the promise is failed then the combine promise will fail.

21. What is higher order functions?
22. promise async await
23. How to know which component called the method? console.trace()
24. How to ensure you are getting the latest store in redux?

25. What is 'prototype' object? Or Why JS language is also known as prototyping language?
    - The prototype object is special type of enumerable object to which additional properties can be attached to it which will
      be shared across all the instances of it's constructor function.
      Eg: 
      function Student(name, gender) {
        this.name = name;
        this.gender = gender;
      }

      Student.prototype.age = 15;

      var studObj1 = new Student('Ranga', 'M');
      alert(studObj1.name+", "+studObj1.age); // 15

      var studObj2 = new Student('Zameer', 'M');
      studObj2.age = 35;
      alert(studObj2.name+", "+studObj2.age); // 35

---------------
JS ARCHITECTURE
---------------

- What is lazy loading?
- What is Denal of service.
- how to avoid nested for loop
- How do you handle security of web applicaton.
- Minimium time required to load the web page?
- How will you increase the performance of web application.
  https://www.altexsoft.com/blog/engineering/12-techniques-of-website-speed-optimization-performance-testing-and-improvement-practices/
  1.  Make use of CDN links to load the external resources.
  2.  Move your website to a better host:
      There are three possible types of hosting:
        - Shared hosting - cheap and slow
        - Virtual Private Servers (VPS) hosting - expensive and faster
        - Dedicated server - very expensive and very fast.
  3.  Optimize the size of images on your website:
      The best way to reduce the image size without compromising its quality is to compress images using such tools as 
      'ImageOptim', 'JPEGmini', or 'Kraken'. 
      Use of sprite image for icon so it will be loaded only one time.
  4.  Use website caching:
  5.  Implement Gzip Compression:
      Gzip Compression is an effective way to reduce the size of files. It minimizes the HTTP requests and reduces the server
      response time. Gzip compresses the files before sending them to the browser. On the user side, a browser unzips the
      files and presents the contents. This method can work with all files on your website. You can enable Gzip on your
      website by adding some lines of the code or via a utility called gzip.
  6.  Reduce the use of web fonts:
      Web fonts have become very popular in website design. Unfortunately, the use of web fonts has a negative impact on the
      speed of page rendering. Web fonts add extra HTTP requests to external resources. The following measures will help you
      reduce the size of web font traffic.
      Use modern formats WOFF2 for modern browsers;
      Include only those character sets that are used on the site;
      Choose only the needed styles

- How to check Performance of web application from google chrome
- How browser will know the new version file#code.js
- Microfront ends, webpack fedration
- How will you decide which web technology to use?
- How cross site scripting attack example - sanitize html
- How to logout from all tabs
- Why micro-service are stateless?
- How to manage flash sale?
- How you decide which component develop?
- Thousand records 

- What is the difference between linking to an image, a website, and an email address?
  The HTML img tag is used to link an image to a website.
  The HTML anchor tag is used to link a website by adding the path of the website in the hypertext reference (href) attribute.
  To link an email address, we specify mailto at the beginning of the email address and pass this path in the href attribute of
  the anchor tag.

- What’s the difference between standards mode and quirks mode?
  There are now three modes used by the layout engines in web browsers: quirks mode, almost standards mode, and full standards
  mode. In quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. This is essential in order
  to support websites that were built before the widespread adoption of web standards. In full standards mode, the behavior is
  (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small
  number of quirks implemented.

- What kind of things must you be wary of when the design or developing for multilingual sites?

----------
MANAGEMENT
----------

- How will you divide your work
- How will handle a situation where given time is not sufficient to deliver the project?

ES6 features:
 - templating
 - destructure

-------
ANGULAR
-------
1.  What is an Angular framework?
    - Angular is a Javascript Binding framework which binds the HTML UI and JavaScript Model.
      It is MVVM, MVC, MVP, MVW.
      It helps to develop the SPA with the help of routing.

2.  Difference between AngularJS and Angular?
    - AngularJS is old 1.x family and Angular starts from verion 2, 4, 5, 6, 7, 8, 9(IVY)...
    - In AngularJS JS language is used and in Angular TypeScript language is used.
    - There is ARCHITECTURE difference: in AngularJS we used Controllers and View loads the controllers and 
      in Angular is component based where Component loads the View.
    - Angular has a CLI where it is not available in AngularJS.
    - AngularJS is not mobile compliant whereas the Angular is mobile compliant where we can use frameworks like
      IONIC and develop the mobile application.
    - AngularJS cannot be run on server side but Angular can be run at server side.

3.  What are 'Directives' in Angular?
    - Directives allows you to attach behaviour to your html DOM.
    - It is an Angular syntaxs in HTML which go and change the behaviour of HTML DOM.

4.  Explain different types of directives in Angular?
    - There are 3 types of directives in Angular SAC: Structural, Attribute and Component.
      - Structural Directives:  This directive changes the DOM layout by adding or removing the elements.
                                Eg: *ngFor
      - Attributes Directives:  This directive change the apperance and behaviour of HTML elements.
                                <div [hidden]="hide()">Hello</div>
      - Component Directives: It is directive with template. It's like a user control.

5.  What is NPM and npm_modules folder?
    - NPM: is the node package manager which helps to install js packages eg jquery.
    - npm_modules:  it is the folder where all the packages are installed.

6.  Explain the package.json file in Angular?
    - Package.json file contains the references of all the JS packages we are using in the project.
      npm install will install all the packages in one go.

7.  What is TypeScript and why do we need it?
    - TypeScript is the superset of Javascript and it adds types to the JavaScript.
      Eg: let x:number = 1;
      x = 'number'; ---> this will give compile time error.
    - It gives the Object orientation evnviornment which transpiles/converts to JavaScript.
      eg:
      class Customer {

      }
      class CustomerChild extends Customer {

      }

      Note: Command: tsc name.ts  --- converts to name.js

8.  Explain importance of Angualar CLI?
    - Angular CLI is command line interface by which we can create initial Angular project template. So rather than
      starting from scratch we have some boiler plate to start with.
      Also we can create components, services using CLI.
      Command to install CLI is: npm install @angular/cli
      Command to create angular project is: ng new <proj-name>

9.  What is the component and modules in Angular?
    - Component: Component is where we write the binding code between View and Model.
    - Modules:  Logicall groups the components.

10. Explain the importance of decorators in Angular?
    - Decorator defines what kind of class is it.
      Eg: if we decorate '@Component' then it says it's an Angular Component and if we put '@NgModule' it becomes
          an Angular Module.

11. What are Annotation or MetaData in Angular?
    - Same as question 10.

12. What are templates in Angular?
    - Template is an HTML view of Angular in which we can write the html/directive code.
    - There are two types of defining templates one is inline and other is separate file.
      Eg:
      @Component({
        selector: "app-component",
        template: "<b>test</b>"
        templateUrl: "./customer.html"
      })

13. Explaing different (four) types of data binding in Angular?
    - Data binding defines how the View and Component communicate with each other.
    - There are four types of binding in Angular:
      - Expresson/Interpolation {{}}: Data flow from Component to the View.
      - Property binding []:  Data flows from Component to the View and it is binded to the property of HTML tag.
      - Event binding (): When you want to send the event from View to Component.
      - Two way binding [()]: Data flow from View to Component and vice versa.

      Eg: <input [(ngModel)]="customerObj.name" />        --->  Two way binding
          {{customerObj.name}}                            --->  Expression/Interpolation Binding
          <div [hidden]="customerObj.show">Hello</div>    --->  One way of binding
          <button (click)="btnClicked()"></button>        --->  Event Binding

14. Explain the Architecture of Angualar/Describe main pillars of Angular?
    - There are 7 important pillars of Angular:
      1.  Template:   The HTML view of Angular.
      2.  Component:  Binds the view and model.
      3.  Modules:    Groups the components logically.
      4.  Bindings:   Defines how View and Component communicate.
      5.  Directives: Changes the DOM behaviour.
      6.  Services:   Helps to share common login across the project.
      7.  DI:         Dependency injection helps to inject instance across constructor.

15. What is a SPA?
    - SPA stands for Single Page Application.
    - SPA are applications where the main UI gets loaded once and then the needed UI is loaded on demand.

16. How to implement SPA? What is routing in Angular?
    - In Angular SPA can be implemented with the help of Routing.
    - Routing is a simple collection which has two things URL and when this URL is called which component to load.
    - Routing helps you to define the navigation for your Angular application.

17. How to implement Routing in Angular?
    - First step is to create 'AppRoutingModule' and import it in our main module in imports.
    - AppRoutingModule should include import { Routes, RouterModule } from '@angular/router';
    - In AppRoutingModule define a collection which contains for which URL which component needs to be loaded.
      Eg: const routes: Routes = [
          { path: 'first-component', component: FirstComponent },
          { path: 'second-component', component: SecondComponent },
        ];
    - Then in imports add RouterModule.forRoot(routes)
      @NgModule({
        imports: [RouterModule.forRoot(routes)],
        exports: [RouterModule]
      })
    - Then in HTML you define the <router-outlet> where the page will be loaded.
      Eg: <router-outlet></router-outlet>
    - Also need to define the [routerLink]
      Eg: <a [routerLink]="['Home]">Home</a>
    - If we need to navigate via script then we need to call this.router.navigate()
      Eg: this.router.navigate(['/Home'])

18. What is lazy loading in Angular?
    - Lazy loading means on demand loading. Loading only necessary HTML, CSS and Javascript files so that you have
      better performance.

19. How to implement Lazy Loading in Angular?
    - To implement Lazy loading in Angular you need to do two things.
      - First divide your project into separate separate modules.
      - And then the module you want to do Lazy loading use 'loadChildren' in your route collection.

20. What are services in Angular?
    - Services helps us to share common logic across Angular project.
      Eg: Logger, Validations, HTTP services.

21. What is Dependency Injection?
    - Dependency Injection is an application design pattern where rather than creating object instances from within
      the component, Angular injects it via the constructor.

22. How to implement the Dependency Injection?
    - To do Dependency Injection in Angualar we need to use the 'providers' property which is available in @NgModule decorator.
      And then you can go to your component in construtor we say give service
      Eg: 
      In Module file:
      @NgModule({
        providers: [
          { provide: BaseLogger, useClass: HttpLogger}
        ]
      })

      In component file:
      constructor(public l: BaseLogger)

23. What is the benefit of Dependency Injection?
    - Dependency Injection helps to decouple class dependencies, so that when you add new dependencies you do not have to do
      changes everywhere in project.

24. What is the difference between 'ng serve' and 'ng build'?
    - 'ng serve' builds inmemory while 'ng build' builds on the hard disk, so actually it goes and creates dist folder and put all
      compiled code in this folder.
      So when you want to go for production build 'ng build' command is used.

25. Explain the --prod parameter in 'ng build'?
    - '--prod' compresses your JS file, remove comments, creates GUIDs of your JS files and make your application ready for
      production.

26. Explain ViewChild and ViewChildren?
    - ViewChild and ViewChidren helps us to refer the HTML elements of the View.
    - ViewChild is use to refering only single element and ViewChildren is to refer the collection.

    - Eg:
      <div #div1>Hello</div>
      <comp2>
        <p>Hello Component 2 element 1</p>
      </comp2>
      <comp2>
        <p>Hello Component 2 element2</p>
      </comp2>

      @ViewChild('div', { static: false }) divref ....
      @ViewChild(comp2, { static: false }) tref ....
      @ViewChildren(comp2) myComponent: QueryList<comp2>

27. Why do we need template reference variables?
    - A template reference variable is used to give reference to the DOM Element, a component, directive, or a web component within
      a template

28. What is ContentProjection?
    - Content Projection is scenario where we need project html content from Parent Component to Child Component
    - Content from parent component will be shown inside of <ng-content> tag of child component.

    Component 1: 
    <comp> <p> hello component 2 </p></comp>

    Component 2:
    <ng-content></ng-content>

29. Explain Content Projection Slot?
    - If we have multiple ng-content tag in Child Component and we want to show specific content inside specific slot.

    Eg:
    Parent Component:
    <comp> 
      <p> hello component 2 </p>
      <p slot1> hello component 2 - slot 1</p>
      <p slot2> hello component 2 - slot 2</p>
    </comp>
     
    Child Component:

    <ng-content></ng-content>
    <ng-content select="slot1"></ng-content>
    <ng-content select="slot2"></ng-content>



30. What is ContentChild and ContentChildren?
    - ContentChild and ContentChildren helps us to access the projected content from the Parent Component.
    Eg:
    Component 1
    <comp2>
      <p #projectedcontent>Projected Item 1</p>
      <p #projectedcontent>Projected Item 2</p>
    </comp2>

    Component 2
    <ng-content>
    </ng-content>

    Component 2 TS:
    @ContentChild("projectedcontent")
    @ContentChildren("projectedcontent")

31. ViewChild vs ViewChidren vs ContentChild vs ContentChildren?
    - "ViewChild and ViewChildren" will helpful for accessing the HTML elements of its own view.
    - "ContentChild and ContentChildren" will helpful for accessing the HTML elements which are Projected by the Parent.

32. Explain the importance of Component Life Cycle? What are exactly Angular Component Hooks? Explain the LifeCycle or
    events in Angular Components?
    - Angular component hooks are nothing but readymade events provided by Angular which developer can use it and write
      the custome code. For example if we want to write some initialization then we can use 'ngOnInit' event, if we need
      to write any cleanup code once the component is unloaded then we can use 'ngOnDestroy'

33. Explain Events and Sequence of Component Life cycle?
    - Complete lifecyle Angular events can be divided into two parts the first are those sequence of events which are
      fired when Component is loaded first time and second sequence of events are those events which are fired on every
      change detection.

      Hooks fired when Component loaded first time:
      - Constructor:  Constructor is and event of TypeScript class, it will fire irrespect of Angular.
      - ngOnChanges:  ngOnChanges is called when data bounded to input elements changes.
      - ngOnInit:     ngOnInit is called when data bound properties are displayed on screen. And it is where the input values
                      are set.
      - ngDoCheck:    ngDoCheck is called when ever Angular change detection runs, so whenever Angular runs change Detection it
                      is invoked.
      - ngAfterContentInit: ngAfterContentInit is called after Angular projects external content into the component View.
      - ngAfterContentCheck:  ngAfterContentCheck is called after Angular checks content projected.
      - ngAfterViewInit:  After Angular initializes components, View, ChildVIews and projected Content then ngAfterViewInit is
                          fired.
      - ngAfterViewChecked: So after default 'View Detection' ran , content checked ran, after that 'ngAfterViewChecked' is run.
      - ngDestroy:  When component is unloaded then 'ngDestroy' event is fired.

      Hooks fired when change detection:
      - So whenever changes occur in View eg: when input value is changed then change detections hooks are fired.
      - ngOnChanges:
      - ngDoCheck:
      - ngAfterContentChecked:
      - ngAfterViewChecked:

34. Constructor VS ngOnInit()? What kind of code you will put in Constructor and in ngOnInit?
    - Constructor:  - Constructor is a TypeScript concept it is invoked by TypeScript framework.
                    - There is not way to access html DOM element since View and Component are not initialized.
                    - Initials the class member variables and can do Dependency Injection.
    - ngOnInit: - ngOnInit is an Angular concept and it is invoked by Angular framework.
                - At this time Component is initialized and View binding is done so here we can write initializing code as well
                  as initializing of class member variables also loading of grid, enable/disabling UI etc

35. How to make HTTP calls using Angular?
    - Import 'HttpClientModule' at the module level.
    - Import 'HttpClient' from '@angular/common/http'.
    - Create object of 'HttpClient' using 'Dependency Injection'.
    - We can make 'post' or 'get' call using 'HttpClient'.
    - Using subscribe function handle the success and error response.

36. What is the need of Subscribe function? 37. How to handle errors when HTTP fails?
    - subscribe function is use to handle success and error response from server.
    - subscribe function has first success callback function and second one is the error callback function.

38. How to pass the data between components? 39. What are Input, Output and event Emitters? 40. How to pass data during routing?
    - Scenario 1: Parent child component scenario.
                  - To pass data from Parent component to Child component we can use 'Input' decorator.
                  - To pass data from Child component to Parent component we can use 'Output' decorator and by using 'EventEmitter' we can emit.
                  - We can also use 'ViewChild' decorator and pass data directly also.

    - Scenario 2: When you are navigating from one component to another component.
                  - we can use queryparams
    - Scenario 3: Using service

41. Is it a good practice to pass data using services ?
    - No, since service can be use to share the data across the components.

42. What is the need of Angular Pipes?
    - Pipes helps to transform data on Angular UI expression from one format to another format.
      Eg: <p> Hello {{'world' | uppercase }}

43. Can you name some built-in Angular Pipes?
    - CurrencyPipe: {{ 1234.56 | currency:'USD' }} => $1234.56
    - DecimalPipe: {{ 3.14159265 | number: '3.1-2' } => 003.14
    - LowerCasePipe: <p> Hello {{'woRLD' | uppercase }} = Hello WORLD
    - UpperCasePipe: <p> Hello {{'woRLD' | lowercase }} = Hello world
    - DatePipe: {{ dateVal | date: 'shortTime' }} => 4:38 PM

44. How to create Custom pipes in Angular?
    - Custome pipe can be creating by implementing the PipeTransform

    UI:
    {{ 2 | sqaure }}

    Pipe ts:
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
      name: 'square'
    })

    export class SquarePipe implements PipeTransform {

      transform(value: number) {
        return value * value;
      }
    }

45. What's the full form of RxJS?
    - RxJS stands for Reactive extentions for JavaScript.

46. What is the purpose of RxJS?
    - Main purpose of RxJS is to handle Asynchronous data stream easily.
    Note: Asynchronous data can be http response, Timer or port.

47. What are Observables and Observer in RxJS?
    - Observable and Observer is RxJS objects to handle Asynchronous data stream.
    - Observable represents Asynchronous data stream and Observer is nothing but a function which will subscribe the
      Observable and listen to the data stream.

48. Explain the Subscribe with sample code?
    - Goal of Subscribe is to attach the listener to the Observable.

    Eg:
    import { Observable } from 'rxjs';
    import { map, filter } from 'rxjs/operator';
    function AsyncStream(observer){
      setTimer(()=> {
        observer.next(Math.random()*10);
      }, 1000)
    }

    var mainObservableObj = Observable.create(AsyncStream);

    var filterObservalObj = mainObservableObj.pipe(filter( x =>  x > 4));

    var subscriptionObj = filterObservalObj.subscribe(res => {
      observerFn(res);
    });

    function observerFn(data) {
      console.log(data);
      filterObservalObj.unsubsribe();
    }

49. How to to unsubsribe the Observable stream in RxJS?
    - We can unsubsribe observable using <Observable Object>.unsubsribe method.

50. Explain concept of operators with Sample code?
    - Operator is nothing but a small piece of logic that will change one observable stream to another observable stream
      using Pipe.

51. How to install RxJS?
    - npm install rxjs

52. Differentiate between RxJS and Promise?
    - Observable return the stream of data and Promise return a single value.
    - We can subscribe and unsubsribe stream and we cannot cancel the Promise.

53. How you have used RxJS in Angular project?
    - RxJS is used mostly with HTTP calls since it returns stream of data/Observable.

54. What kind of RxJS operator you have used uptill now:
    - Map:  Transform data in a Observable into a different format.
    - Filter: Filter the data based on filter criteria
    - From: This operator will turn Array, Promise or Iterable into an Observable.
    - Delay:  Emits a value with delay.
    - Pluck:
    - Merge:
    - Concat:

55. What is Push/Reactive vs Pull/Imperative programming?
    - RxJS is Reative programing.
    - Imperator programming is where caller code keeps the callee to get the stream of data. So Listerner code is responsible
      to pull stream of Data. Eg: Polling API.
    - Reactive programming is where we register a callback and the stream is resposible to push data.
    - Some developers also consider it as publisher and subsciber model as well.

56. What are interceptor in Angular?
    - Interceptor helps us to execute pre-processing logic before any HTTP call is made from Angular applicaiton.

57. How to implement interceptors?
    - First create a class which has the pre-processing logic and this class should implememt 'HttpInterceptor' interface.
    - Dependency inject the pre-processing class at module level using providers.

58. Give some usecase of HttpInterceptor?
    - Authentication: In every call we would want to attach the JWT token. This can be done by attaching the token in the headers
                      before call is made.
    - Modifiying URL: If we want to modify url before API call we can do that using Interceptors.
    - Caching:  Take data from cache rather making a api call. Do before HTTP call is executed you can look up in the local
                cache, get data and cancel the expensive HTTP call to server.
    - Modify Request and Response payloads: If we want to modify the request and reponse payload than we can do it via Interceptors

59. Can we have multiple Interceptors?
    - Yes we can fire multiple Interceptors in pre-processing by defining interceptors in the provider and specify 'multi' value 
      to true.
    - As per the sequence provided in the providers interceptor will fire in that sequence.
    Eg:
      providers: [
        { provide: HTTP_INTERCEPTORS, useClass: <classname1>, multi: true }
        { provide: HTTP_INTERCEPTORS, useClass: <classname2>, multi: true }
      ]
13. Promises vs timeout promisis has preccedence than any other function
14. Declaretive vs Imperative React/angular is declaretive and js is imperative
23. web pack
- canativate
- authguard
- loadchildren
- router
- Dom Sanitizer in angular
- CORS attack/forgery

- Difference between callback and promise
- custom module instead of appcomponent
- content projection
- change detection
- what zone.js
- routing
- lazy load routing
- what are decorators class type and property
- attr bind land event bind
- 2 way binding
- structural and behaviour components
- Observals and Promise difference
- viewchild and viewchildren
- viewencapsulation true, from component to access universal css

- Unit test frameworks
- jest framwork


AWS:
4. AWS - different ways to deploy application
IAM
VPC - Compound
- public subnet 80, privite subnet - people
- route tables - Door
- Load Balancer - Enter
Peer VPC (Mumbai, Delhi)

SQL:
Graphql
All ids, single query to db
Mongo, SQL, NoSQL
Write SQL
Read Mongo, NoSQL
NoSQL - no in memory
Redis - 
Rabbit nq - 


NODEJS, Express, 
1. Indexing in backend

CSS:
The CSS Box Model

polyfills for reduce, subject and behaviour subject?
Sum of the array elements

Custome middleware in nodeJS

------

1. Introduce yourself
My name is Zameer Inamdar.
Born and brought up in Pune.
Completed my Bachelor and Master degrees in Computer Science.
Started my career from 2009, worked for Niche Software Solutions as a PHP developer.
Here worked on CMS like Joomla, Drupal.
Worked on Juvlon project which was an email marketing project.

In 2011 join the iGATE company.
Here I got the oppurtunity to work on hybrid mobile applications using Phonegap/cordova.
These applications was for Metlife client which is Insurance company.

In 2013 join the Persistent Systems worked on ANZ bank mobile applicaiton which belongs to banking domain.
Then worked on different projects like SRM, Radia and MVision EDR which belongs to Cyber Security domain.

2. Which project u r working and my role?
Currenlty I am working on MVision EDR project and my role is UI Lead.

3.  Could you please brief about your current project.
Currently I am working on MVision EDR project.
It is Endpoint threat detection and response product which is used by SOC (Security operation center) Analysts.
Primary task of this product is to monitor the traces on endpoint.
Analysis the trace and to identity is there any threat/malware found at endpoint.
Notify/Alert the SOC Analysts about the threat detection.
SOC Analysts can take actions like create the Investigation.
Quarantine the endpoint on which treat is detected.

Different workspace/dashboards
- Monitoring Dashboard: Alert about threats and create Investigation on that threat.
- Investigation Dashboard: It will display the investigation details and provide answers to the playbook questions.
- Real Time search Dashboard: SOC Analyst can search using query across all live devices.
- Historical Search Dashboard: SOC analysts can search using query across all devices

Daily tasks I do related to project?
- Implement the new features.
- Understand the new requirements, provide the estimate for new work and have discussion with PM.
- Distribute the work within the team and guide the team member if they have any queries.
- Code owner of this project so need to review all PR raised by the team member
- Plan the release for each PSI (Potential Shippable Increment)